const personalQR = require('../models/personalQR');
const linkQR = require('../models/linkQR');
const textQR = require('../models/textQR');
const Session = require('../models/Session');
const jwt = require('jsonwebtoken');

const listQRCodes = async (req, res) => {
    try {
         // Access the token from the session or Session schema
        const session = await Session.findOne({sessionToken: 'some-session-token'});
        const jwtToken = session.jwtToken;
        
        if (!jwtToken) {
            return res.status(401).send('Access Denied');
        }
        // Verify the token
        const verified = await jwt.verify(jwtToken, process.env.TOKEN_SECRET);
        decoded = jwt.decode(jwtToken, { complete: true });
        const currentAccount = decoded.payload.id;
        
        if (!currentAccount) {
            return res.status(401).send('Unauthorized');
        }
        
        
        // Retrieve all QR codes generated by the current user
        const personalQRCodes = await personalQR.find({ account: currentAccount });
        const linkQRCodes = await linkQR.find({ account: currentAccount });
        const textQRCodes = await textQR.find({ account: currentAccount });
        // Combine all QR codes into a single array
        const allQRCodes = [...personalQRCodes, ...linkQRCodes, ...textQRCodes];
        if (!allQRCodes) {
            return res.status(404).send('null');
        }

        // Send the list of QR codes to the client
        res.json({ qrCodes: allQRCodes });
        // Render the page with the list of QR codes
        // res.render('qrList', { qrCodes: allQRCodes });

    } catch (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
    }
};

module.exports = {
    listQRCodes,
};
